// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  auth0Id       String?  @unique @map("auth0_id")
  name          String?
  avatar        String?
  credits       Int      @default(50) // User's current credit balance
  subscriptionTier SubscriptionTier @default(FREE) @map("subscription_tier")
  dailyQuota    Int      @default(3) @map("daily_quota")
  dailyUsed     Int      @default(0) @map("daily_used")
  totalGenerated Int     @default(0) @map("total_generated")
  lastResetDate DateTime @default(now()) @map("last_reset_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  characters    Character[]
  creditTransactions CreditTransaction[]

  @@map("users")
}

model Character {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  name        String?
  description String?       // User's original description
  prompt      String        // Enhanced/optimized prompt
  imageUrl    String?       @map("image_url")
  thumbnailUrl String?      @map("thumbnail_url")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  themes      CharacterTheme[]

  @@map("characters")
}

model CharacterTheme {
  id          String    @id @default(cuid())
  characterId String    @map("character_id")
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  variants    ThemeVariant[]

  @@unique([characterId, name])
  @@map("character_themes")
}

model ThemeVariant {
  id          String    @id @default(cuid())
  themeId     String    @map("theme_id")
  characterId String    @map("character_id")
  prompt      String    // The edit instruction used to create this variant
  imageUrl    String?   @map("image_url")
  thumbnailUrl String?  @map("thumbnail_url")
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  theme       CharacterTheme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@map("theme_variants")
}

// API Cost Configuration
model ApiCostConfig {
  id          String   @id @default(cuid())
  apiEndpoint String   @unique @map("api_endpoint") // e.g., "/characters/generate-image"
  cost        Int      // Credits required for this API call
  description String?  // Description of what this API does
  enabled     Boolean  @default(true) // Whether this cost is currently active
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("api_cost_config")
}

// Credit Transaction Log
model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  amount      Int      // Positive for credits added, negative for credits spent
  balance     Int      // Balance after this transaction
  type        TransactionType
  apiEndpoint String?  @map("api_endpoint") // API endpoint if this is a usage transaction
  description String?  // Description of the transaction
  metadata    Json?    // Additional metadata (e.g., character ID, prompt, etc.)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("credit_transactions")
}

// Enums
enum SubscriptionTier {
  FREE
  PREMIUM
  PRO
}

enum TransactionType {
  PURCHASE    // User bought credits
  REWARD      // User received credits (e.g., signup bonus)
  USAGE       // User spent credits on API call
  REFUND      // Credits refunded
  ADMIN       // Admin adjustment
}